function [f,g] = quick_err(q)% [f,g] = quick_err(q)%	New error function to minimize for Quick fits.  f is the negative of%	the log likelihood of obtaining the data under parameters q.  This%	is just like fitfunw.  g provides the constraints.%	The Quick function is.  % -%	  y = 1 - .5 * exp( -(x/q(1))^q(2) )% -%	thus q(1) is alpha, and q(2) is beta.%	The data is in columns such that Data(:,1) is abscissa %	Data(:,2) is observed percent correct (0..1)%	Data(:,3) is number of observations.%	The value of err is the -log likelihood of obtaining Data%	given the parameters q.%global Data x = Data(:,1);y = Data(:,2);n = Data(:,3);fprintf(1,'quickerr: q = %d\t%d\n', q);z = 1 - .5 * exp( -(x/q(1)).^q(2) );if z == 0 | z == 1 | ~finite(z)  fprintf(1,'quick_err: z = %f \tq(1) = %f\tq(2) = %f  \n', z,q(1), q(2));endllik = n .* y .* log(z) +  n .* (1-y) .* log(1-z);% for moment, just return the square error% err = norm(z-y);f = -sum(llik)g(1) = -(q(1) + .00001); 				% constrain that alpha > 0g(2) = -q(2);