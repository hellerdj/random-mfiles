function y = getunit(name,pcoh)% y = getunit(name,pcoh) returns a vector of expected response values for unit%   in file 'name'.  pcoh is a vector of coherence terms, containing%   positive and negative values.%   The routine goes to the data file, runs unix shell stuff and then%   performs spline interpolation to get the values.  If pcoh contains%   values greater than or less than the maximum coh in the data file, then%   this function uses linear interpolation to extrapolate.  The%   interpolation is performed separately on positive and negative coherences.%%   Updated 1/1/95.  (Note, I commented out the calculation%   of variance since it was somewhat problematic.  The nargout lines check%   for improper calls and alert the user.)if nargout > 1  sprintf('Too many output variables.  Type ''help getunit'' for details.')  exit;endeval(['!tail +2 > goo < ', name]);!cat goo | dm "x1 * (2*x2 - 1)" s4 | spmoment -2 | tail +5 | dm s1 s2 s4 | sort -n > goo.datload goo.dat;maxcoh = max(goo(:,1));L = (pcoh >= -maxcoh) & (pcoh <= maxcoh); % identify the range we have data% spline over this rangey1 = spline(goo(:,1), goo(:,2)+(rand/10000), pcoh(L)); % use linear regression to extrapolate to vals of pcoh higher than the dataL = pcoh > maxcohif sum(L) > 0  Lp = goo(:,1) >= 0; 			% ident. pos coh  A = [ones(size(goo(Lp,1))) goo(Lp,1)];  b = A\goo(Lp,2);  C = [ones(size(pcoh(L)')) pcoh(L)'];  x = C*b;  y1 = [y1 x'];				% tack on the extrapolated valsend% use linear regression to extrapolate to vals of pcoh lower than the dataL = pcoh < -maxcoh;if sum(L) > 0  Ln = goo(:,1) <= 0; 			% ident. pos coh  A = [ones(size(goo(Ln,1))) goo(Ln,1)];  b = A\goo(Ln,2);  C = [ones(size(pcoh(L)')) pcoh(L)'];  x = C*b;  y1 = [x' y1];				% tack on the extrapolated valsend% old stuff% y = spline(goo(:,1), goo(:,2)+(rand/10000), pcoh);% v = spline(goo(:,2), goo(:,3)+(rand/10000), y);