function [C,Q] = structCVMwrap(n,rmax,lamda)%  [C,Q] = structCVMwrap(n,rmax,lamda)%  Returns covariance matrix, C, and its matrix square root, Q.  %  These are structured covariance matrices of size, n by n, in which% the correlation falls off as an exponential as a function of separation of% the indices.  The correlation between i=k and j=k+1 is rmax.   The% correlation between i=k and j=k+v follows decay with space constant,% lamda.  Note that lamda is in units of half the matrix dimension. A value of% 0.1 means fall off by 1/e in 1 tenth of one half the matrix size.  So for% a matrix size of 500  .1 leads to a roll off of rmax/e by 25.  In this% version, the distance along the matrix wraps around so that the 1st and% n-1 elements are as close to each other as the 1st and 2nd elements.  The% furthest element is half the matrix dimension away, and this is the minima% of the correlation.%% To generate an n-tuple (vector) of random deviates with 0 mean and unit% variance, but with correlation specified in C, simple multiply%   y = Q*x% where x is an n by 1 column vector of *independent* normal deviates with% unit variance and mean 0 (i.e., N{0,1}).% To generate m such n-tuples, simply multiply %   Y = Q*X% where X is an n by m matrix -- essentially the little x above, in m% columns.  When you make this, you will note that the m column vectors in% the output, Y, are like m repetition of the n-tuple pick. The expected% covariance, cov(Y'), is C.  n.b., you must transpose Y so that cov will% respect the column vectors as the repetitions.%% see also meanR, qrancorrelmtx%% 10/30/96 mns and jdr wrote it%          jdr fixed diag% 11/28/96 mns introducing wrap around - spawned structCVMwrap.mif nargin < 3  error('structCVM requires 3 inputs')enda = (0.5 * (1+sawtooth(linspace(0,2*pi*(n-1)/n,n),.5)));a = [a a a];% plot(a)A = zeros(n,n);for i = 1:n  m = rem(i-1,n);  A(i,:) = a(n-m+1:n-m+n);end% round(10*A)d = a(2)-a(1);C = rmax * exp(d/lamda)* exp(-A/lamda);for i=1:n  C(i,i) = 1;end% mesh(C)Q = real(sqrtm(C));