% This is a testing ground for generating F ratios to compare two nested% models. From this I generated the function, nestedF.mn = 50x = linspace(0,2,n)';A = [ones(size(x)) x x.^2];A1 = A(:,[1 2]);% model 1 is a 2nd order polynomialbtrue = [1 2 1]'% choice of sigma is such that all terms come out signif in 2nd order fity = A*btrue + normrnd(0,.5,n,1);		% fake dataplot(x,y,'.')[h,p,F,df,brich,bred] = nestedF(y,A,A1,.05);hpFdfbrichbred[b2,bint2,r2,rint2,stat2] = regress(y,A,.05); % fit 2nd order[b1,bint1,r1,rint1,stat1] = regress(y,A1,.05); % fit 1st order[b2 bint2]				% all terms are signifdfs2 = n - 3;				% df for our estimate of s2% estimate of s2 is from residuals in model 1 (the richer model)% Notice that this is not a bad approximation to the standard deviation we% used to make fake data.  The expected value is .25s2 = sum(r2.^2)/dfs2		extraSS2 = sum(r1.^2) - sum(r2.^2) extradf = 1;F21 = (extraSS2/extradf) / s21 - fcdf(F21,extradf,dfs2)		%  9.2413e-06% good, that's the way it should have come out.% Now let's try a model that has a nonsignificant quadratic termbtrue = [1 2 0]'% choice of sigma is same as abovey = A*btrue + normrnd(0,.5,n,1);		% fake dataplot(x,y,'.')[h,p,F,df,brich,bred] = nestedF(y,A,A1,.05);hpFdfbrichbred[b2,bint2,r2,rint2,stat2] = regress(y,A,.05); % fit 2nd order[b1,bint1,r1,rint1,stat1] = regress(y,A1,.05); % fit 1st order[b2 bint2]				% last term is not signifdfs2 = n - 3;				% df for our estimate of s2% estimate of s2 is from residuals in model 1 (the richer model)s2 = sum(r2.^2)/dfs2		extraSS2 = sum(r1.^2) - sum(r2.^2) extradf = 1;F21 = (extraSS2/extradf) / s21 - fcdf(F21,extradf,dfs2)		%  .7415