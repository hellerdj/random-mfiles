function [contingencyTable,p1,p2,E] = ctableFromMargAndOddsRat(mrow1,mrow2,mcol1,mcol2,orat)% contingencyTable = ctableFromMargAndOddsRat(mrow1,mrow2,mcol1,mcol2,orat)% Constructs a 2-by-2 contingency table based on the row and column marginals,% which conforms to a specified odds ratio.  % % Consider the following 2x2 table.  % The odds ratio compares the odds of getting disease given exposure% with the odds of getting disease with no exposure.  The odds is the probabability% of getting disease divided by 1 minus this probabability.% The contingency table is in the form%             Disease% ex         yes   no% po    yes   a    b  |        mrow1=a+b % su    no    c    d  |        mrow2=c+d% re        ----------%           mcol1  mcol2%            a+c   b+d%% The prob of getting disease with exposure is p1 = a/(a+b).% The odds are therefore a/(a+b) / (1 - a/(a+b))% The prob of getting disease without exposure is p2 = c/(c+d), etc.% The odds ratio is p1/(1-p1) / p2/(1-p2) = ad/bc% % ctableFromMargAndOddsRat will construct the table from the marginals% to achieve the oddsratio (ORAT).  The routine is useful for exploring % confidence regions of the odds ratio.  Often we know how many observations there% are in the 4 marginals. The routine returns the contingency table as a% 2 by 2 matrix.% p1 and p2 are the probabilities defined above% E is the expected contingency table under the null hypothesis, p1=p2%% To get the expected counts under H0:p1=p2, set orat=1% This table is always returned as E%% see also oddsratio.m fisherExact.m% testing% a = 15, b=23, c=5, d=30% mrow1 = a+b; mrow2=c+d; mcol1=a+c; mcol2=b+d;% oddsratio(a,b,c,d,0.05)% R = a*d/(b*c)% 2/2/99 mns wrote italpha = mrow1;beta = mrow2;gamma = mcol1;phi = mcol2;% algebra leads to quadratic function in terms of a, table(1,1)c = [0 0 0];c(1) = R-1;c(2) = -R*alpha - R*gamma - phi + alpha;c(3) = alpha * gamma* R;% solve for roots of quadraticz = roots(c);% select the sensible roota = z(z>0 & z<=alpha & z<=gamma)b = mrow1 - a;c = mcol1 - a;d = mcol2 - b;contingencyTable = [a b; c d];p1 = a/(a+b);p2 = c/(c+d);E = [mrow1*mcol1 mrow1*mcol2; mrow2*mcol1 mrow2*mcol2] / (mrow1+mrow2);