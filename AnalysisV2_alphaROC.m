% Analysisv2_alpha.m%% 8/19/99 jdr%% 7/27/01 check this line below for time-scale of ROC:%	 rocArea = nanroc(ratemat(rT1,:),ratemat(rT2,:),100,min4roc);%% load data files%load /home/lab/data/rxtime/lipguiV2/matfiles/n_T1rxt.mat%load /home/lab/data/rxtime/lipguiV2/matfiles/b_T1rxt.mat%load /home/lab/data/rxtime/lipguiV2/matfiles/T1_rxt.mat%ColumnNamesV2load T1RT.matColumnNames608clear fwhos% Name the report files.  Use *.matreportAlpha = '/home/lab/data/rxtime/lipguiV2/matfiles/meanAlpha.mat'reportROC   = '/home/lab/data/rxtime/lipguiV2/matfiles/alphaROC.mat'%big loop:% for i_unit =%  corrects, errors%  max lat%  big matrix of spike rates (rows are trials, cols are msec)%    for i_coh = %       pull out T1c & T2c%       take nanmean of cols & store %       do nanROC & store%    end%  clear big matrix% end%checking%Lu = data{1}(:,1)==1585;%rows = find(Lu);%rate_out=cell(sum(Lu),1);%sum(Lu)%we'll need these at various times in the loop:uvect = unique(x(:,R_UNUM))cohlist = unique(x(:,R_COH))%allocate output cellsmeanAlphaT1 = cell(length(uvect),length(cohlist));meanAlphaT2 = cell(length(uvect),length(cohlist));alphaROC = cell(length(uvect),length(cohlist));%time constants for alpha functiontd = 1; tg = 20;%offsets to define epoch of spikes we care aboutstonOffset = -100;sacOffset = -100;%selection arraysL1 = x(:,R_TRG)==1;L2 = x(:,R_TRG)==2;Lc  = x(:,R_COR)==1;L1c = L1&Lc;L2c = L2&Lc;%for ROCmin4roc = 5;%testingi_unit = 6for i_unit = 1:length(uvect)  clear unum Lu rows rate_out  unum = uvect(i_unit)  Lu = x(:,1)==unum; sum(Lu)  rows = find(Lu);  rate_out=cell(sum(Lu),1);      for i_trial = rows(1):rows(end)	 	 %% get startmsec & endmsec to make time vector	 t_ston = x(i_trial,R_TSTON);	 t_sac = x(i_trial,R_TSAC);	 startmsec = stonOffset;	 endmsec =  t_sac + sacOffset - t_ston;	 t = startmsec:endmsec;	 %% and spike times	 r_ston = s{i_trial} - t_ston;  %spike times wrt ston																 %% make alpha function	 nmsec = (1:length(t)) - 1;	 a = alphafunc(nmsec,tg,td); 	 	 %% apply alpha to spike times	 % make a lattice of times	 st = zeros(size(t));	 st(ismember(t,r_ston)) = 1 ./ (t(2)-t(1));	 %sum(st)	 %do the convolution	 q = conv(st,a); 	 spikerate = 1000 * q(1:length(t));  	 %% save this unit's data	 j = i_trial - rows(1)+1;	 rate_out{j} = spikerate;	 %plot(t,spikerate)  end    size(rate_out)  sum(Lu)    %%convert rate_out to a matrix of spike rates to calc means and do ROC  %below    %%how big does matrix need to be?  %find the longest trial for this unit  size_r = size(rate_out)  lastcol = nans(size_r(1),1);  for k = 1:size_r(1)	 tmp = size(rate_out{k});	 lastcol(k) = tmp(2);  end    %allocate the matrix  ncols = max(lastcol);  nrows = length(rows);  ratemat = nans(nrows,ncols);    %i_row = 1  for i_row = 1:nrows	  last = lastcol(i_row);	  rate_out{i_row};	  ratemat(i_row,1:last) = rate_out{i_row};	    end    %i_coh = 6  for i_coh = 1:length(cohlist)	 ucoh = cohlist(i_coh)	 Lcoh = x(:,R_COH)==ucoh;	 rT1 = find(Lu&L1c&Lcoh) - rows(1)+1;	 rT2 = find(Lu&L2c&Lcoh) - rows(1)+1;	 %%first save the average alpha function for each coh	 meanAlpha1 = nanmean(ratemat(rT1,:));	 meanAlpha2 = nanmean(ratemat(rT2,:));	 	 time = [(1-100):(ncols-100)];	 size(time)	 size(meanAlpha1)	 plot(time,meanAlpha1)	 set(gca,'YLim',[0 100])	 	 %save a subsample	 subT1 = meanAlpha1(:,[1:5:end]);	 subT2 = meanAlpha2(:,[1:5:end]);	 	 %tsub = time(:,[1:5:end]);	 %plot(tsub,subT2)	 %hold on; plot(tsub,subT1,'g--')	 %set(gca,'YLim',[0 100])	 	 %% ok to here	 	 save meanAlphaT1{i_unit,i_coh} subT1	 save meanAlphaT2{i_unit,i_coh} subT2	 	 clear nrows ncols lastrow last	 clear meanAlphaT1 subT1 meanAlphaT2 subT2  	 %%now the ROC	ncols = length(ratemat(1,:))	 for i = 100:ncols		 i		 rocArea(i_coh,i) = nanroc(ratemat(rT1,i),ratemat(rT2,i),100,min4roc);	end	 subROC = rocArea(:,[1:5:end]);	 save alphaROC{i_unit,i_coh} subROC	 	 clear rocArea subROC	   end  clear ratemat  end% ckecking - looks good%[L1c(1:20) L2c(1:20) (x(1:20,[R_DIR R_TRG R_COR]))]		%wrt SACCADE%allocate output cellsmeanAlphaT1 = cell(length(uvect),length(cohlist));meanAlphaT2 = cell(length(uvect),length(cohlist));alphaROC = cell(length(uvect),length(cohlist));%time constants for alpha functiontd = 1; tg = 20;%offsets to define epoch of spikes we care aboutstonOffset = 200;sacOffset = 0;%selection arraysL1 = x(:,R_TRG)==1;L2 = x(:,R_TRG)==2;Lc  = x(:,R_COR)==1;L1c = L1&Lc;L2c = L2&Lc;%for ROCmin4roc = 5;%testingi_unit = 6for i_unit = 1:length(uvect)  clear unum Lu rows rate_out  unum = uvect(i_unit)  Lu = x(:,1)==unum; sum(Lu)  rows = find(Lu);  rate_out=cell(sum(Lu),1);      for i_trial = rows(1):rows(end)	 	 %% get startmsec & endmsec to make time vector	 t_ston = x(i_trial,R_TSTON);	 t_sac = x(i_trial,R_TSAC);	 startmsec = stonOffset;	 endmsec =  t_sac + sacOffset - t_ston;	 t = startmsec:endmsec;	 %% and spike times	 r_sac = s{i_trial} - t_ston;  %spike times wrt ston																 %% make alpha function	 nmsec = (1:length(t)) - 1;	 a = alphafunc(nmsec,tg,td); 	 	 %% apply alpha to spike times	 % make a lattice of times	 st = zeros(size(t));	 st(ismember(t,r_sac)) = 1 ./ (t(2)-t(1));	 %sum(st)	 %do the convolution	 q = conv(st,a); 	 spikerate = 1000 * q(1:length(t));  	 %% save this unit's data	 j = i_trial - rows(1)+1;	 rate_out{j} = spikerate;	 %plot(t,spikerate)  end    size(rate_out)  sum(Lu)    %%convert rate_out to a matrix of spike rates to calc means and do ROC  %below    %%how big does matrix need to be?  %find the longest trial for this unit  size_r = size(rate_out)  firstcol = nans(size_r(1),1);  for k = 1:size_r(1)	 tmp = size(rate_out{k});	 firstcol(k) = tmp(2);  end  hist(firstcol)    %allocate the matrix  ncols = max(firstcol);  nrows = length(rows);  ratemat = nans(nrows,ncols);    %i_row = 1  for i_row = 1:nrows	  first = ncols - firstcol(i_row) +1;	  rate_out{i_row};	  ratemat(i_row,first:ncols) = rate_out{i_row};	    end    %i_coh = 6  for i_coh = 1:length(cohlist)	 ucoh = cohlist(i_coh)	 Lcoh = x(:,R_COH)==ucoh;	 rT1 = find(Lu&L1c&Lcoh) - rows(1)+1;	 rT2 = find(Lu&L2c&Lcoh) - rows(1)+1;	 %%first save the average alpha function for each coh	 meanAlpha1 = nanmean(ratemat(rT1,:));	 meanAlpha2 = nanmean(ratemat(rT2,:));	 	 time = [-ncols+1:0];	 size(time)	 size(meanAlpha1)	 plot(time,meanAlpha1)	 set(gca,'YLim',[0 100])	 	 %save a subsample	 subT1 = meanAlpha1(:,[1:5:end]);	 subT2 = meanAlpha2(:,[1:5:end]);	 	 %tsub = time(:,[1:5:end]);	 %plot(tsub,subT2)	 %hold on; plot(tsub,subT1,'g--')	 %set(gca,'YLim',[0 100])	 	 %% ok to here	 	 save meanAlphaT1{i_unit,i_coh} subT1	 save meanAlphaT2{i_unit,i_coh} subT2	   	 %%now the ROC	ncols = length(ratemat(1,:))	 for i = ncols-400:ncols		 rocArea(i_coh,i) = nanroc(ratemat(rT1,i),ratemat(rT2,i),100,min4roc);	 end	 time = [-ncols+1:0];	 plot(time,rocArea(i_coh,:))	 subROC = rocArea(:,[1:5:end]);	 save alphaROC{i_unit,i_coh} subROC	 	 clear rocArea subROC	 clear nrows ncols lastrow last firstrow first	 clear meanAlphaT1 subT1 meanAlphaT2 subT2	   end  clear ratemat  end