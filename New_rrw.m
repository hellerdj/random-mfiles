function [ret,x0,str,ts,xts]=New_rrw(t,x,u,flag);%NEW_RRW	is the M-file description of the SIMULINK system named NEW_RRW.%	The block-diagram can be displayed by typing: NEW_RRW.%%	SYS=NEW_RRW(T,X,U,FLAG) returns depending on FLAG certain%	system values given time point, T, current state vector, X,%	and input vector, U.%	FLAG is used to indicate the type of output to be returned in SYS.%%	Setting FLAG=1 causes NEW_RRW to return state derivatives, FLAG=2%	discrete states, FLAG=3 system outputs and FLAG=4 next sample%	time. For more information and other options see SFUNC.%%	Calling NEW_RRW with a FLAG of zero:%	[SIZES]=NEW_RRW([],[],[],0),  returns a vector, SIZES, which%	contains the sizes of the state vector and other parameters.%		SIZES(1) number of states%		SIZES(2) number of discrete states%		SIZES(3) number of outputs%		SIZES(4) number of inputs%		SIZES(5) number of roots (currently unsupported)%		SIZES(6) direct feedthrough flag%		SIZES(7) number of sample times%%	For the definition of other parameters in SIZES, see SFUNC.%	See also, TRIM, LINMOD, LINSIM, EULER, RK23, RK45, ADAMS, GEAR.% Note: This M-file is only used for saving graphical information;%       after the model is loaded into memory an internal model%       representation is used.% the system will take on the name of this mfile:sys = mfilename;new_system(sys)simver(1.3)if (0 == (nargin + nargout))     set_param(sys,'Location',[124,39,735,572])     open_system(sys)end;set_param(sys,'algorithm',     'RK-45')set_param(sys,'Start time',    '0.0')set_param(sys,'Stop time',     '1')set_param(sys,'Min step size', '0.0001')set_param(sys,'Max step size', '.001')set_param(sys,'Relative error','1e-3')set_param(sys,'Return vars',   '')%     Subsystem  ['Pulse',13,'Generator'].new_system([sys,'/',['Pulse',13,'Generator']])set_param([sys,'/',['Pulse',13,'Generator']],'Location',[158,441,759,682])add_block('built-in/Outport',[sys,'/',['Pulse',13,'Generator/out_1']])set_param([sys,'/',['Pulse',13,'Generator/out_1']],...		'hide name',0,...		'position',[560,105,580,125])add_block('built-in/Gain',[sys,'/',['Pulse',13,'Generator/Gain']])set_param([sys,'/',['Pulse',13,'Generator/Gain']],...		'hide name',0,...		'Gain','ht',...		'position',[510,102,535,128])add_block('built-in/Product',[sys,'/',['Pulse',13,'Generator/Product']])set_param([sys,'/',['Pulse',13,'Generator/Product']],...		'hide name',0,...		'position',[455,105,480,125])add_block('built-in/Logical Operator',[sys,'/',['Pulse',13,'Generator/Logical',13,'Operator1']])set_param([sys,'/',['Pulse',13,'Generator/Logical',13,'Operator1']],...		'Operator','NOT',...		'Number of Input Ports','1',...		'position',[355,38,385,62])add_block('built-in/Logical Operator',[sys,'/',['Pulse',13,'Generator/Logical',13,'Operator']])set_param([sys,'/',['Pulse',13,'Generator/Logical',13,'Operator']],...		'Operator','XOR',...		'position',[285,38,315,62])add_block('built-in/Constant',[sys,'/',['Pulse',13,'Generator/Constant1']])set_param([sys,'/',['Pulse',13,'Generator/Constant1']],...		'Value','stt',...		'position',[295,149,320,171])add_block('built-in/Clock',[sys,'/',['Pulse',13,'Generator/Clock1']])set_param([sys,'/',['Pulse',13,'Generator/Clock1']],...		'hide name',0,...		'position',[295,100,315,120])add_block('built-in/Relational Operator',[sys,'/',['Pulse',13,'Generator/Relational',13,'operator']])set_param([sys,'/',['Pulse',13,'Generator/Relational',13,'operator']],...		'hide name',0,...		'position',[370,102,400,133])add_block('built-in/Sum',[sys,'/',['Pulse',13,'Generator/Sum1']])set_param([sys,'/',['Pulse',13,'Generator/Sum1']],...		'hide name',0,...		'inputs','+-',...		'position',[130,120,150,140])add_block('built-in/Sum',[sys,'/',['Pulse',13,'Generator/Sum']])set_param([sys,'/',['Pulse',13,'Generator/Sum']],...		'hide name',0,...		'inputs','+-',...		'position',[135,35,155,55])add_block('built-in/Constant',[sys,'/',['Pulse',13,'Generator/Constant']])set_param([sys,'/',['Pulse',13,'Generator/Constant']],...		'position',[25,30,45,50])add_block('built-in/Unit Delay',[sys,'/',['Pulse',13,'Generator/Unit Delay']])set_param([sys,'/',['Pulse',13,'Generator/Unit Delay']],...		'orientation',2,...		'Sample time','[Ts,st1]',...		'position',[145,75,195,95])add_block('built-in/Unit Delay',[sys,'/',['Pulse',13,'Generator/Unit Delay1']])set_param([sys,'/',['Pulse',13,'Generator/Unit Delay1']],...		'orientation',2,...		'Sample time','[Ts,st2]',...		'x0','ini',...		'position',[140,165,190,185])add_line([sys,'/',['Pulse',13,'Generator']],[390,50;430,50;430,110;450,110])add_line([sys,'/',['Pulse',13,'Generator']],[320,50;350,50])add_line([sys,'/',['Pulse',13,'Generator']],[325,160;345,160;345,125;365,125])add_line([sys,'/',['Pulse',13,'Generator']],[540,115;555,115])add_line([sys,'/',['Pulse',13,'Generator']],[485,115;505,115])add_line([sys,'/',['Pulse',13,'Generator']],[405,120;450,120])add_line([sys,'/',['Pulse',13,'Generator']],[320,110;365,110])add_line([sys,'/',['Pulse',13,'Generator']],[140,85;105,85;105,50;130,50])add_line([sys,'/',['Pulse',13,'Generator']],[160,45;230,45;230,85;200,85])add_line([sys,'/',['Pulse',13,'Generator']],[50,40;130,40])add_line([sys,'/',['Pulse',13,'Generator']],[155,130;210,130;210,175;195,175])add_line([sys,'/',['Pulse',13,'Generator']],[135,175;100,175;100,135;125,135])add_line([sys,'/',['Pulse',13,'Generator']],[50,40;70,40;70,125;125,125])add_line([sys,'/',['Pulse',13,'Generator']],[160,45;280,45])add_line([sys,'/',['Pulse',13,'Generator']],[155,130;245,130;245,55;280,55])set_param([sys,'/',['Pulse',13,'Generator']],...		'Mask Display','plot(0,0,100,100,[90,75,75,60,60,35,35,20,20,10],[20,20,80,80,20,20,80,80,20,20])',...		'Mask Type','Pulse Generator')set_param([sys,'/',['Pulse',13,'Generator']],...		'Mask Dialogue','Pulse Generator.|Pulse period (secs):|Pulse width:|Pulse height:|Pulse start time:')set_param([sys,'/',['Pulse',13,'Generator']],...		'Mask Translate','Ts=@1; du=@2; ht=@3; stt=@4; ini=ones(length(ht),1); st1=rem(stt,Ts); st2=rem(stt+du,Ts);if(Ts<=1.2*du),ini=zeros(length(ht),1);end;')set_param([sys,'/',['Pulse',13,'Generator']],...		'Mask Help','Pulse generator which ensures pulse\ntransitions are hit. Provides a vector of pulses when the height is entered as a vector.\nUnmask to see how it works.')set_param([sys,'/',['Pulse',13,'Generator']],...		'Mask Entries','.3\/.001\/1\/0.2\/')%     Finished composite block ['Pulse',13,'Generator'].set_param([sys,'/',['Pulse',13,'Generator']],...		'position',[35,42,70,78])add_block('built-in/Sum',[sys,'/','Sum'])set_param([sys,'/','Sum'],...		'position',[155,165,175,185])add_block('built-in/Product',[sys,'/','Product'])set_param([sys,'/','Product'],...		'position',[205,163,235,187])add_block('built-in/Gain',[sys,'/','extra to T1'])set_param([sys,'/','extra to T1'],...		'Gain','0',...		'Mask Display','0',...		'Mask Dialogue','eval(''slideg(0,0,0.1,0)'');',...		'position',[95,101,145,129])%     Subsystem  'Graph of reset'.new_system([sys,'/','Graph of reset'])set_param([sys,'/','Graph of reset'],'Location',[0,59,274,252])add_block('built-in/Inport',[sys,'/','Graph of reset/x'])set_param([sys,'/','Graph of reset/x'],...		'position',[65,55,85,75])add_block('built-in/S-Function',[sys,'/',['Graph of reset/S-function',13,'M-file which plots',13,'lines',13,'']])set_param([sys,'/',['Graph of reset/S-function',13,'M-file which plots',13,'lines',13,'']],...		'function name','sfuny',...		'parameters','ax, color,dt',...		'position',[130,55,180,75])add_line([sys,'/','Graph of reset'],[90,65;125,65])set_param([sys,'/','Graph of reset'],...		'Mask Display','plot(0,0,100,100,[90,10,10,10,90,90,10],[65,65,90,40,40,90,90],[90,78,69,54,40,31,25,10],[77,60,48,46,56,75,81,84])',...		'Mask Type','Graph scope.')set_param([sys,'/','Graph of reset'],...		'Mask Dialogue','Graph scope using MATLAB graph window.\nEnter plotting ranges and line type.|Time range:|y-min:|y-max:|Line type (rgbw-:*). Seperate each plot by ''/'':')set_param([sys,'/','Graph of reset'],...		'Mask Translate','color = @4; ax = [0, @1, @2, @3]; dt = -1;')set_param([sys,'/','Graph of reset'],...		'Mask Help','This block plots to the MATLAB graph window and can be used as an improved version of the Scope block. Look at the m-file sfuny.m to see how it works. This block can take scalar or vector input signal.')set_param([sys,'/','Graph of reset'],...		'Mask Entries','1\/-1.1\/1.2\/''y-/g--/c-./w:/m*/ro/b+''\/')%     Finished composite block 'Graph of reset'.set_param([sys,'/','Graph of reset'],...		'position',[350,1,380,39])%     Subsystem  'RRW'.new_system([sys,'/','RRW'])set_param([sys,'/','RRW'],'Location',[143,41,778,548])open_system([sys,'/','RRW'])add_block('built-in/Product',[sys,'/','RRW/Product'])set_param([sys,'/','RRW/Product'],...		'position',[115,195,150,215])add_block('built-in/Inport',[sys,'/','RRW/Motion +MF'])set_param([sys,'/','RRW/Motion +MF'],...		'Port','2',...		'position',[15,130,35,150])add_block('built-in/Sum',[sys,'/','RRW/Sum4'])set_param([sys,'/','RRW/Sum4'],...		'inputs','-+',...		'position',[255,80,275,100])add_block('built-in/Sum',[sys,'/','RRW/Sum2'])set_param([sys,'/','RRW/Sum2'],...		'inputs','+-+-',...		'position',[190,157,210,203])add_block('built-in/Relational Operator',[sys,'/',['RRW/Relational',13,'Operator']])set_param([sys,'/',['RRW/Relational',13,'Operator']],...		'orientation',2,...		'position',[85,248,115,272])add_block('built-in/Inport',[sys,'/','RRW/Motion ~MF'])set_param([sys,'/','RRW/Motion ~MF'],...		'Port','3',...		'position',[15,190,35,210])add_block('built-in/Relational Operator',[sys,'/',['RRW/Relational',13,'Operator1']])set_param([sys,'/',['RRW/Relational',13,'Operator1']],...		'orientation',2,...		'position',[80,473,110,497])add_block('built-in/Product',[sys,'/','RRW/Product1'])set_param([sys,'/','RRW/Product1'],...		'position',[110,420,145,440])add_block('built-in/Constant',[sys,'/','RRW/Constant'])set_param([sys,'/','RRW/Constant'],...		'orientation',3,...		'Value','0',...		'position',[220,560,240,580])add_block('built-in/Inport',[sys,'/','RRW/T +MF'])set_param([sys,'/','RRW/T +MF'],...		'Port','4',...		'position',[15,360,35,380])add_block('built-in/Inport',[sys,'/','RRW/T -MF'])set_param([sys,'/','RRW/T -MF'],...		'Port','5',...		'position',[15,415,35,435])add_block('built-in/Reset Integrator',[sys,'/',['RRW/Reset',13,'Integrator']])set_param([sys,'/',['RRW/Reset',13,'Integrator']],...		'position',[310,115,340,145])add_block('built-in/Saturation',[sys,'/','RRW/Saturation'])set_param([sys,'/','RRW/Saturation'],...		'Lower Limit','-1',...		'Upper Limit','1',...		'position',[430,118,460,142])add_block('built-in/Outport',[sys,'/','RRW/out_1'])set_param([sys,'/','RRW/out_1'],...		'position',[600,185,620,205])add_block('built-in/Product',[sys,'/','RRW/Product2'])set_param([sys,'/','RRW/Product2'],...		'orientation',2,...		'position',[300,38,330,62])add_block('built-in/Inport',[sys,'/','RRW/Reset'])set_param([sys,'/','RRW/Reset'],...		'position',[20,55,40,75])add_block('built-in/Inport',[sys,'/','RRW/Leak'])set_param([sys,'/','RRW/Leak'],...		'Port','6',...		'position',[20,10,40,30])add_line([sys,'/','RRW'],[215,180;225,180;225,95;250,95])add_line([sys,'/','RRW'],[230,555;230,140;305,140])add_line([sys,'/','RRW'],[280,90;290,90;290,120;305,120])add_line([sys,'/','RRW'],[230,555;230,265;120,265])add_line([sys,'/','RRW'],[40,140;140,140;140,165;185,165])add_line([sys,'/','RRW'],[40,200;110,200])add_line([sys,'/','RRW'],[295,50;215,50;215,85;250,85])add_line([sys,'/','RRW'],[80,260;60,260;60,210;110,210])add_line([sys,'/','RRW'],[40,425;105,425])add_line([sys,'/','RRW'],[150,430;175,430;185,195])add_line([sys,'/','RRW'],[75,485;55,485;55,435;105,435])add_line([sys,'/','RRW'],[230,535;125,535;115,490])add_line([sys,'/','RRW'],[155,205;165,205;165,175;185,175])add_line([sys,'/','RRW'],[40,370;170,370;170,185;185,185])add_line([sys,'/','RRW'],[45,65;110,65;110,130;305,130])add_line([sys,'/','RRW'],[345,130;425,130])add_line([sys,'/','RRW'],[465,130;525,130;525,195;595,195])add_line([sys,'/','RRW'],[550,195;550,255;120,255])add_line([sys,'/','RRW'],[550,255;550,480;115,480])add_line([sys,'/','RRW'],[45,20;355,20;355,45;335,45])add_line([sys,'/','RRW'],[370,130;370,55;335,55])%     Finished composite block 'RRW'.set_param([sys,'/','RRW'],...		'position',[350,83,380,137])%     Subsystem  ['Auto-Scale',13,'Graph of Output'].new_system([sys,'/',['Auto-Scale',13,'Graph of Output']])set_param([sys,'/',['Auto-Scale',13,'Graph of Output']],'Location',[0,59,274,252])add_block('built-in/Inport',[sys,'/',['Auto-Scale',13,'Graph of Output/x']])set_param([sys,'/',['Auto-Scale',13,'Graph of Output/x']],...		'position',[65,55,85,75])add_block('built-in/S-Function',[sys,'/',['Auto-Scale',13,'Graph of Output/S-function',13,'M-file which plots',13,'lines',13,'']])set_param([sys,'/',['Auto-Scale',13,'Graph of Output/S-function',13,'M-file which plots',13,'lines',13,'']],...		'function name','sfunyst',...		'parameters','ax, color, npts, dt',...		'position',[130,55,180,75])add_line([sys,'/',['Auto-Scale',13,'Graph of Output']],[90,65;125,65])set_param([sys,'/',['Auto-Scale',13,'Graph of Output']],...		'Mask Display','plot(0,0,100,100,[83,76,63,52,42,38,28,16,11,84,11,11,11,90,90,11],[75,58,47,54,72,80,84,74,65,65,65,90,40,40,90,90])',...		'Mask Type','Storage scope.')set_param([sys,'/',['Auto-Scale',13,'Graph of Output']],...		'Mask Dialogue','Storage scope using MATLAB graph window.\nEnter plotting ranges and line type.|Initial Time Range:|Initial y-min:|Initial y-max:|Storage pts.:|Line type (rgbw-.:xo):')set_param([sys,'/',['Auto-Scale',13,'Graph of Output']],...		'Mask Translate','npts = @4; color = @5; ax = [0, @1, @2, @3]; dt=-1;')set_param([sys,'/',['Auto-Scale',13,'Graph of Output']],...		'Mask Help','This block uses a MATLAB figure window to plot the input signal.  The graph limits are automatically scaled to the min and max values of the signal stored in the scope''s signal buffer.  Line type must be in quotes.  See the M-file sfunyst.m.')set_param([sys,'/',['Auto-Scale',13,'Graph of Output']],...		'Mask Entries','1\/0\/.01\/1000\/''y-/g--/c-./w:/m*/ro/b+''\/')%     Finished composite block ['Auto-Scale',13,'Graph of Output'].set_param([sys,'/',['Auto-Scale',13,'Graph of Output']],...		'position',[480,90,510,130])%     Subsystem  ['Auto-Scale',13,'Graph of leak'].new_system([sys,'/',['Auto-Scale',13,'Graph of leak']])set_param([sys,'/',['Auto-Scale',13,'Graph of leak']],'Location',[0,59,274,252])add_block('built-in/Inport',[sys,'/',['Auto-Scale',13,'Graph of leak/x']])set_param([sys,'/',['Auto-Scale',13,'Graph of leak/x']],...		'position',[65,55,85,75])add_block('built-in/S-Function',[sys,'/',['Auto-Scale',13,'Graph of leak/S-function',13,'M-file which plots',13,'lines',13,'']])set_param([sys,'/',['Auto-Scale',13,'Graph of leak/S-function',13,'M-file which plots',13,'lines',13,'']],...		'function name','sfunyst',...		'parameters','ax, color, npts, dt',...		'position',[130,55,180,75])add_line([sys,'/',['Auto-Scale',13,'Graph of leak']],[90,65;125,65])set_param([sys,'/',['Auto-Scale',13,'Graph of leak']],...		'Mask Display','plot(0,0,100,100,[83,76,63,52,42,38,28,16,11,84,11,11,11,90,90,11],[75,58,47,54,72,80,84,74,65,65,65,90,40,40,90,90])',...		'Mask Type','Storage scope.')set_param([sys,'/',['Auto-Scale',13,'Graph of leak']],...		'Mask Dialogue','Storage scope using MATLAB graph window.\nEnter plotting ranges and line type.|Initial Time Range:|Initial y-min:|Initial y-max:|Storage pts.:|Line type (rgbw-.:xo):')set_param([sys,'/',['Auto-Scale',13,'Graph of leak']],...		'Mask Translate','npts = @4; color = @5; ax = [0, @1, @2, @3]; dt=-1;')set_param([sys,'/',['Auto-Scale',13,'Graph of leak']],...		'Mask Help','This block uses a MATLAB figure window to plot the input signal.  The graph limits are automatically scaled to the min and max values of the signal stored in the scope''s signal buffer.  Line type must be in quotes.  See the M-file sfunyst.m.')set_param([sys,'/',['Auto-Scale',13,'Graph of leak']],...		'Mask Entries','1\/0\/.01\/1000\/''y-/g--/c-./w:/m*/ro/b+''\/')%     Finished composite block ['Auto-Scale',13,'Graph of leak'].set_param([sys,'/',['Auto-Scale',13,'Graph of leak']],...		'position',[480,440,510,480])add_block('built-in/Signal Generator',[sys,'/',['Signal',13,'Generator']])set_param([sys,'/',['Signal',13,'Generator']],...		'Peak','5.000000',...		'Peak Range','5.000000',...		'Freq','1.000000',...		'Freq Range','5.000000',...		'Wave','Saw',...		'Units','Hz')open_system([sys,'/',['Signal',13,'Generator']])set_param([sys,'/',['Signal',13,'Generator']],...		'position',[300,443,345,477])add_block('built-in/Product',[sys,'/','Product4'])set_param([sys,'/','Product4'],...		'position',[370,448,400,472])add_block('built-in/Product',[sys,'/','Product1'])set_param([sys,'/','Product1'],...		'position',[205,268,235,292])add_block('built-in/Sum',[sys,'/','Sum1'])set_param([sys,'/','Sum1'],...		'position',[145,265,165,285])add_block('built-in/Gain',[sys,'/','extra to T2'])set_param([sys,'/','extra to T2'],...		'Gain','0.0219',...		'Mask Display','0.0219',...		'Mask Dialogue','eval(''slideg(0,0.0219,0.1,0)'');',...		'position',[115,330,155,350])%     Subsystem  ['Band-Limited',13,'White Noise1'].new_system([sys,'/',['Band-Limited',13,'White Noise1']])set_param([sys,'/',['Band-Limited',13,'White Noise1']],'Location',[54,341,339,470])add_block('built-in/Outport',[sys,'/',['Band-Limited',13,'White Noise1/Out_1']])set_param([sys,'/',['Band-Limited',13,'White Noise1/Out_1']],...		'position',[230,40,250,60])add_block('built-in/Gain',[sys,'/',['Band-Limited',13,'White Noise1/Gain']])set_param([sys,'/',['Band-Limited',13,'White Noise1/Gain']],...		'Gain','[sqrt(Cov)]/[sqrt(Ts)]',...		'position',[155,31,195,69])add_block('built-in/Zero-Order Hold',[sys,'/',['Band-Limited',13,'White Noise1/Zero-Order',13,'Hold']])set_param([sys,'/',['Band-Limited',13,'White Noise1/Zero-Order',13,'Hold']],...		'Sample time','Ts',...		'position',[85,34,120,66])add_block('built-in/White Noise',[sys,'/',['Band-Limited',13,'White Noise1/White Noise']])set_param([sys,'/',['Band-Limited',13,'White Noise1/White Noise']],...		'Seed','seed',...		'position',[25,40,45,60])add_line([sys,'/',['Band-Limited',13,'White Noise1']],[50,50;80,50])add_line([sys,'/',['Band-Limited',13,'White Noise1']],[200,50;225,50])add_line([sys,'/',['Band-Limited',13,'White Noise1']],[125,50;150,50])set_param([sys,'/',['Band-Limited',13,'White Noise1']],...		'Mask Display','plot(t(:),r2(:))',...		'Mask Type','Continuous White Noise.')set_param([sys,'/',['Band-Limited',13,'White Noise1']],...		'Mask Dialogue','White noise for continuous (s-domain) systems.\nBand-limited using zero-order-hold.|Noise Power:|Sample Time:|Seed')set_param([sys,'/',['Band-Limited',13,'White Noise1']],...		'Mask Translate','Cov = @1; Ts = @2; seed = @3; r = rand(1,12); r2 = [r(1),r;r,r(12)]; t =[1:13;1:13];')set_param([sys,'/',['Band-Limited',13,'White Noise1']],...		'Mask Help','Implemented using white noise into Zero-Order Hold block. The seed and power can be vectors of the same length to produce a vector of white noise sources. For faster simulation, set sample time to the highest value possible but in accordance with the fastest dynamics of system.')set_param([sys,'/',['Band-Limited',13,'White Noise1']],...		'Mask Entries','[0.1]\/0.001\/[477]\/')%     Finished composite block ['Band-Limited',13,'White Noise1'].set_param([sys,'/',['Band-Limited',13,'White Noise1']],...		'position',[15,252,60,288])%     Subsystem  ['Band-Limited',13,'White Noise4'].new_system([sys,'/',['Band-Limited',13,'White Noise4']])set_param([sys,'/',['Band-Limited',13,'White Noise4']],'Location',[54,341,339,470])add_block('built-in/Outport',[sys,'/',['Band-Limited',13,'White Noise4/Out_1']])set_param([sys,'/',['Band-Limited',13,'White Noise4/Out_1']],...		'position',[230,40,250,60])add_block('built-in/Gain',[sys,'/',['Band-Limited',13,'White Noise4/Gain']])set_param([sys,'/',['Band-Limited',13,'White Noise4/Gain']],...		'Gain','[sqrt(Cov)]/[sqrt(Ts)]',...		'position',[155,31,195,69])add_block('built-in/Zero-Order Hold',[sys,'/',['Band-Limited',13,'White Noise4/Zero-Order',13,'Hold']])set_param([sys,'/',['Band-Limited',13,'White Noise4/Zero-Order',13,'Hold']],...		'Sample time','Ts',...		'position',[85,34,120,66])add_block('built-in/White Noise',[sys,'/',['Band-Limited',13,'White Noise4/White Noise']])set_param([sys,'/',['Band-Limited',13,'White Noise4/White Noise']],...		'Seed','seed',...		'position',[25,40,45,60])add_line([sys,'/',['Band-Limited',13,'White Noise4']],[50,50;80,50])add_line([sys,'/',['Band-Limited',13,'White Noise4']],[200,50;225,50])add_line([sys,'/',['Band-Limited',13,'White Noise4']],[125,50;150,50])set_param([sys,'/',['Band-Limited',13,'White Noise4']],...		'Mask Display','plot(t(:),r2(:))',...		'Mask Type','Continuous White Noise.')set_param([sys,'/',['Band-Limited',13,'White Noise4']],...		'Mask Dialogue','White noise for continuous (s-domain) systems.\nBand-limited using zero-order-hold.|Noise Power:|Sample Time:|Seed')set_param([sys,'/',['Band-Limited',13,'White Noise4']],...		'Mask Translate','Cov = @1; Ts = @2; seed = @3; r = rand(1,12); r2 = [r(1),r;r,r(12)]; t =[1:13;1:13];')set_param([sys,'/',['Band-Limited',13,'White Noise4']],...		'Mask Help','Implemented using white noise into Zero-Order Hold block. The seed and power can be vectors of the same length to produce a vector of white noise sources. For faster simulation, set sample time to the highest value possible but in accordance with the fastest dynamics of system.')set_param([sys,'/',['Band-Limited',13,'White Noise4']],...		'Mask Entries','[0.1]\/0.001\/[88]\/')%     Finished composite block ['Band-Limited',13,'White Noise4'].set_param([sys,'/',['Band-Limited',13,'White Noise4']],...		'position',[15,182,60,218])%     Subsystem  ['Band-Limited',13,'White Noise'].new_system([sys,'/',['Band-Limited',13,'White Noise']])set_param([sys,'/',['Band-Limited',13,'White Noise']],'Location',[54,341,339,470])add_block('built-in/Outport',[sys,'/',['Band-Limited',13,'White Noise/Out_1']])set_param([sys,'/',['Band-Limited',13,'White Noise/Out_1']],...		'position',[230,40,250,60])add_block('built-in/Gain',[sys,'/',['Band-Limited',13,'White Noise/Gain']])set_param([sys,'/',['Band-Limited',13,'White Noise/Gain']],...		'Gain','[sqrt(Cov)]/[sqrt(Ts)]',...		'position',[155,31,195,69])add_block('built-in/Zero-Order Hold',[sys,'/',['Band-Limited',13,'White Noise/Zero-Order',13,'Hold']])set_param([sys,'/',['Band-Limited',13,'White Noise/Zero-Order',13,'Hold']],...		'Sample time','Ts',...		'position',[85,34,120,66])add_block('built-in/White Noise',[sys,'/',['Band-Limited',13,'White Noise/White Noise']])set_param([sys,'/',['Band-Limited',13,'White Noise/White Noise']],...		'Seed','seed',...		'position',[25,40,45,60])add_line([sys,'/',['Band-Limited',13,'White Noise']],[50,50;80,50])add_line([sys,'/',['Band-Limited',13,'White Noise']],[200,50;225,50])add_line([sys,'/',['Band-Limited',13,'White Noise']],[125,50;150,50])set_param([sys,'/',['Band-Limited',13,'White Noise']],...		'Mask Display','plot(t(:),r2(:))',...		'Mask Type','Continuous White Noise.')set_param([sys,'/',['Band-Limited',13,'White Noise']],...		'Mask Dialogue','White noise for continuous (s-domain) systems.\nBand-limited using zero-order-hold.|Noise Power:|Sample Time:|Seed')set_param([sys,'/',['Band-Limited',13,'White Noise']],...		'Mask Translate','Cov = @1; Ts = @2; seed = @3; r = rand(1,12); r2 = [r(1),r;r,r(12)]; t =[1:13;1:13];')set_param([sys,'/',['Band-Limited',13,'White Noise']],...		'Mask Help','Implemented using white noise into Zero-Order Hold block. The seed and power can be vectors of the same length to produce a vector of white noise sources. For faster simulation, set sample time to the highest value possible but in accordance with the fastest dynamics of system.')set_param([sys,'/',['Band-Limited',13,'White Noise']],...		'Mask Entries','[0.1]\/0.001\/[231]\/')%     Finished composite block ['Band-Limited',13,'White Noise'].set_param([sys,'/',['Band-Limited',13,'White Noise']],...		'position',[10,107,55,143])%     Subsystem  ['Band-Limited',13,'White Noise5'].new_system([sys,'/',['Band-Limited',13,'White Noise5']])set_param([sys,'/',['Band-Limited',13,'White Noise5']],'Location',[54,341,339,470])add_block('built-in/Outport',[sys,'/',['Band-Limited',13,'White Noise5/Out_1']])set_param([sys,'/',['Band-Limited',13,'White Noise5/Out_1']],...		'position',[230,40,250,60])add_block('built-in/Gain',[sys,'/',['Band-Limited',13,'White Noise5/Gain']])set_param([sys,'/',['Band-Limited',13,'White Noise5/Gain']],...		'Gain','[sqrt(Cov)]/[sqrt(Ts)]',...		'position',[155,31,195,69])add_block('built-in/Zero-Order Hold',[sys,'/',['Band-Limited',13,'White Noise5/Zero-Order',13,'Hold']])set_param([sys,'/',['Band-Limited',13,'White Noise5/Zero-Order',13,'Hold']],...		'Sample time','Ts',...		'position',[85,34,120,66])add_block('built-in/White Noise',[sys,'/',['Band-Limited',13,'White Noise5/White Noise']])set_param([sys,'/',['Band-Limited',13,'White Noise5/White Noise']],...		'Seed','seed',...		'position',[25,40,45,60])add_line([sys,'/',['Band-Limited',13,'White Noise5']],[50,50;80,50])add_line([sys,'/',['Band-Limited',13,'White Noise5']],[200,50;225,50])add_line([sys,'/',['Band-Limited',13,'White Noise5']],[125,50;150,50])set_param([sys,'/',['Band-Limited',13,'White Noise5']],...		'Mask Display','plot(t(:),r2(:))',...		'Mask Type','Continuous White Noise.')set_param([sys,'/',['Band-Limited',13,'White Noise5']],...		'Mask Dialogue','White noise for continuous (s-domain) systems.\nBand-limited using zero-order-hold.|Noise Power:|Sample Time:|Seed')set_param([sys,'/',['Band-Limited',13,'White Noise5']],...		'Mask Translate','Cov = @1; Ts = @2; seed = @3; r = rand(1,12); r2 = [r(1),r;r,r(12)]; t =[1:13;1:13];')set_param([sys,'/',['Band-Limited',13,'White Noise5']],...		'Mask Help','Implemented using white noise into Zero-Order Hold block. The seed and power can be vectors of the same length to produce a vector of white noise sources. For faster simulation, set sample time to the highest value possible but in accordance with the fastest dynamics of system.')set_param([sys,'/',['Band-Limited',13,'White Noise5']],...		'Mask Entries','[0.1]\/0.001\/[47001]\/')%     Finished composite block ['Band-Limited',13,'White Noise5'].set_param([sys,'/',['Band-Limited',13,'White Noise5']],...		'position',[15,322,60,358])%     Subsystem  ['Band-Limited',13,'White Noise2'].new_system([sys,'/',['Band-Limited',13,'White Noise2']])set_param([sys,'/',['Band-Limited',13,'White Noise2']],'Location',[54,341,339,470])add_block('built-in/Outport',[sys,'/',['Band-Limited',13,'White Noise2/Out_1']])set_param([sys,'/',['Band-Limited',13,'White Noise2/Out_1']],...		'position',[230,40,250,60])add_block('built-in/Gain',[sys,'/',['Band-Limited',13,'White Noise2/Gain']])set_param([sys,'/',['Band-Limited',13,'White Noise2/Gain']],...		'Gain','[sqrt(Cov)]/[sqrt(Ts)]',...		'position',[155,31,195,69])add_block('built-in/Zero-Order Hold',[sys,'/',['Band-Limited',13,'White Noise2/Zero-Order',13,'Hold']])set_param([sys,'/',['Band-Limited',13,'White Noise2/Zero-Order',13,'Hold']],...		'Sample time','Ts',...		'position',[85,34,120,66])add_block('built-in/White Noise',[sys,'/',['Band-Limited',13,'White Noise2/White Noise']])set_param([sys,'/',['Band-Limited',13,'White Noise2/White Noise']],...		'Seed','seed',...		'position',[25,40,45,60])add_line([sys,'/',['Band-Limited',13,'White Noise2']],[50,50;80,50])add_line([sys,'/',['Band-Limited',13,'White Noise2']],[200,50;225,50])add_line([sys,'/',['Band-Limited',13,'White Noise2']],[125,50;150,50])set_param([sys,'/',['Band-Limited',13,'White Noise2']],...		'Mask Display','plot(t(:),r2(:))',...		'Mask Type','Continuous White Noise.')set_param([sys,'/',['Band-Limited',13,'White Noise2']],...		'Mask Dialogue','White noise for continuous (s-domain) systems.\nBand-limited using zero-order-hold.|Noise Power:|Sample Time:|Seed')set_param([sys,'/',['Band-Limited',13,'White Noise2']],...		'Mask Translate','Cov = @1; Ts = @2; seed = @3; r = rand(1,12); r2 = [r(1),r;r,r(12)]; t =[1:13;1:13];')set_param([sys,'/',['Band-Limited',13,'White Noise2']],...		'Mask Help','Implemented using white noise into Zero-Order Hold block. The seed and power can be vectors of the same length to produce a vector of white noise sources. For faster simulation, set sample time to the highest value possible but in accordance with the fastest dynamics of system.')set_param([sys,'/',['Band-Limited',13,'White Noise2']],...		'Mask Entries','[0.1]\/0.001\/[1341]\/')%     Finished composite block ['Band-Limited',13,'White Noise2'].set_param([sys,'/',['Band-Limited',13,'White Noise2']],...		'position',[15,397,60,433])%     Subsystem  ['Band-Limited',13,'White Noise3'].new_system([sys,'/',['Band-Limited',13,'White Noise3']])set_param([sys,'/',['Band-Limited',13,'White Noise3']],'Location',[54,341,339,470])add_block('built-in/Outport',[sys,'/',['Band-Limited',13,'White Noise3/Out_1']])set_param([sys,'/',['Band-Limited',13,'White Noise3/Out_1']],...		'position',[230,40,250,60])add_block('built-in/Gain',[sys,'/',['Band-Limited',13,'White Noise3/Gain']])set_param([sys,'/',['Band-Limited',13,'White Noise3/Gain']],...		'Gain','[sqrt(Cov)]/[sqrt(Ts)]',...		'position',[155,31,195,69])add_block('built-in/Zero-Order Hold',[sys,'/',['Band-Limited',13,'White Noise3/Zero-Order',13,'Hold']])set_param([sys,'/',['Band-Limited',13,'White Noise3/Zero-Order',13,'Hold']],...		'Sample time','Ts',...		'position',[85,34,120,66])add_block('built-in/White Noise',[sys,'/',['Band-Limited',13,'White Noise3/White Noise']])set_param([sys,'/',['Band-Limited',13,'White Noise3/White Noise']],...		'Seed','seed',...		'position',[25,40,45,60])add_line([sys,'/',['Band-Limited',13,'White Noise3']],[50,50;80,50])add_line([sys,'/',['Band-Limited',13,'White Noise3']],[200,50;225,50])add_line([sys,'/',['Band-Limited',13,'White Noise3']],[125,50;150,50])set_param([sys,'/',['Band-Limited',13,'White Noise3']],...		'Mask Display','plot(t(:),r2(:))',...		'Mask Type','Continuous White Noise.')set_param([sys,'/',['Band-Limited',13,'White Noise3']],...		'Mask Dialogue','White noise for continuous (s-domain) systems.\nBand-limited using zero-order-hold.|Noise Power:|Sample Time:|Seed')set_param([sys,'/',['Band-Limited',13,'White Noise3']],...		'Mask Translate','Cov = @1; Ts = @2; seed = @3; r = rand(1,12); r2 = [r(1),r;r,r(12)]; t =[1:13;1:13];')set_param([sys,'/',['Band-Limited',13,'White Noise3']],...		'Mask Help','Implemented using white noise into Zero-Order Hold block. The seed and power can be vectors of the same length to produce a vector of white noise sources. For faster simulation, set sample time to the highest value possible but in accordance with the fastest dynamics of system.')set_param([sys,'/',['Band-Limited',13,'White Noise3']],...		'Mask Entries','[0.1]\/0.001\/[841]\/')%     Finished composite block ['Band-Limited',13,'White Noise3'].set_param([sys,'/',['Band-Limited',13,'White Noise3']],...		'position',[15,462,60,498])add_block('built-in/Product',[sys,'/','Product3'])set_param([sys,'/','Product3'],...		'position',[205,468,235,492])add_block('built-in/Product',[sys,'/','Product2'])set_param([sys,'/','Product2'],...		'position',[210,403,240,427])add_line(sys,[75,60;205,60;205,85;345,85])add_line(sys,[240,175;285,175;285,95;345,95])add_line(sys,[65,270;140,270])add_line(sys,[65,480;115,480;115,475;200,475])add_line(sys,[240,280;285,280;285,105;345,105])add_line(sys,[245,415;275,415;275,115;345,115])add_line(sys,[240,480;260,480;260,125;345,125])add_line(sys,[385,110;475,110])add_line(sys,[165,60;165,20;345,20])add_line(sys,[350,460;350,460;350,455;365,455])add_line(sys,[405,460;415,460;415,350;330,350;330,135;345,135])add_line(sys,[180,175;200,170])add_line(sys,[65,200;105,200;105,180;150,180])add_line(sys,[180,175;200,180])add_line(sys,[65,480;115,480;115,485;200,485])add_line(sys,[350,460;350,460;350,465;365,465])add_line(sys,[65,415;130,415;130,410;205,410])add_line(sys,[65,415;130,415;130,420;205,420])add_line(sys,[405,460;405,460;475,460])add_line(sys,[60,125;90,115])add_line(sys,[150,115;155,115;155,150;135,150;135,170;150,170])add_line(sys,[65,340;110,340])add_line(sys,[170,275;200,275])add_line(sys,[175,275;175,285;200,285])add_line(sys,[160,340;180,340;180,315;125,315;125,280;140,280])drawnow% Return any arguments.if (nargin | nargout)	% Must use feval here to access system in memory	if (nargin > 3)		if (flag == 0)			eval(['[ret,x0,str,ts,xts]=',sys,'(t,x,u,flag);'])		else			eval(['ret =', sys,'(t,x,u,flag);'])		end	else		[ret,x0,str,ts,xts] = feval(sys);	endelse	drawnow % Flash up the model and execute load callbackend