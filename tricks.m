function tricks()% TRICKS is just a list of matlab tricks compiled here for easy reference.  %    Use help tricks to see this.%% Filled symbols.  Use the '.' symbol. %$$$ h = plot(x,y,'.'); %$$$ get(h,'MarkerSize')%$$$ set(h,'MarkerSize',3*get(h,'MarkerSize'),'Color','r')% the default markersize is 6.  So you can just use 18 instead of the 3*% expression.%% Column vector repeated across a matrix of desired size. % This comes up whenever you want to subtract the same column vector from% every column of a matrix. I had used outer products in the past.  But a% faster way is%$$$ x = [1:5]'%$$$ y = x(:,ones(1,10))% makes a 5 by 10.  %$$$ y = x * ones(1,10)			% is the outer product way%% Drawing dots fast.%$$$ %$$$ %$$$ Question: Can you add points to an existing plot without redrawing?%$$$ %$$$   I need advice as to whether it is possible to do incremental%$$$   plotting with MAtlab. FOr example, I have plotted 500 points%$$$   on a graph, and I can use "hold on", and then plot another%$$$   point. But this process replots all the original 500 and is%$$$   thus very time inefficient. Is it possible to just plot one%$$$   extra point?%$$$ %$$$  Answer from Drea Thomas:%$$$ %$$$   Yes. That is possible. What you need to do is modify the%$$$   xdata and ydata of the line on the plot directly. For instance,%$$$   create a plot with one point and expand the axis,%$$$ %$$$     clf;axis([0 10 -1.5 1.5]);hold;h=plot(0,0,'.');%$$$ %$$$   Now, set the "erasemode" of the line on the axis to "none". This%$$$   will keep the axis from re-rendering when you add points.%$$$ %$$$     set(h,'erasemode','none');%$$$ %$$$   Now, add points to the graph and simulate an oscilloscope,%$$$ %$$$     x=0;%$$$     for i=2:1000,%$$$      x = x+.02;%$$$      set(h,'xdata',[get(h,'xdata') x],'ydata',[get(h,'ydata') sin(x)]);%$$$      drawnow;%$$$     end%$$$ %$$$   You could make this faster by preallocating the xdata and ydata%$$$   matrices (filling them with NaN's first). The demo COMET does%$$$   something similar.----------------------------------------------------------------------% Get a boolean vector if all elements in some set of columns matches a% search pattern.suppose x is some matrix and we want to know for which rows of x are columns% specified in h1 equal to some vector of values, ival.  For example, maybe% we want to know if columns h1 = [7,11,21,14]  equal ival = [0 1 .2 -5]L = prod((x(:,h1)==ival(ones(size(x,1),1),:))')';% why does this work?    % uses the ones trick to repeat ival on every line    % the logic returns 0 or 1 as a row vector for each obs.    % we take the row products by taking the prod of transpose and then    % transpose back.  L is then a standard selection array.  