function Q = sqrtcorrelmtx(n,rho,forceReload)% sqrtcorrelmtx(n,rho,forceReload) returns matrix square root of the n by n% correlation matrix whose off-diagonal terms are rho. The algorithm uses % stored values for on and off diagonal terms. This routine is therefore% much faster than sqrtm.m or my algebraic short-cut in qrancorrelmtx.% It requires sqrtcorrelTable.mat, the code for genrating this table is% in make_sqrtcorrelTable.m.  If forceReload = 1, then the table is% loaded on the call. The default behavior is to load the table only on% the first call.% 1/10/00 mns wrote itpersistent sqrtC_on sqrtC_off rvectif nargin < 3  forceReload = 0;endif isempty(sqrtC_on) | forceReload  load sqrtcorrelTable.matendif n > size(sqrtC_on,1)  error('n is too large')endif rho > max(rvect)  error('rho too large')end% Choose the appropriate row from the table and interpolateoffVr = sqrtC_off(n,:);qr_off = interp1(rvect,offVr,rho);onVr = sqrtC_on(n,:);qr_on = interp1(rvect,onVr,rho);Q = repmat(qr_off,n,n) + diag(repmat(qr_on - qr_off,n,1));% A more accurate solution.% $$$ C = repmat(rho,n,n) + diag(repmat(1-rho,n,1))% $$$ X = sqrtm(C)% $$$ X*X'