function [y, L] = diverse(x,matchi,dcol,nmin,nper) %	[y, L] = diverse(x,matchi,dcol,nmin,nper)%		Takes array x and returns a possibly truncated array y and%		binary selection vector L, such that y = x(L,:).  The%		idea is to include only rows of x that exhibit sufficient%		diversity.  This comes up when we try to calculate ROC's for%		example.  Given a group of rows sharing identical values in%		the columns identified by MATCHI, there must be at least%		NMIN different values represented in column DCOL at least%		NPER times per value.  If nmin=2 and nper=3, there must be 2%		different values and at least 3 of each.  If nmin=10 and%		nper = 1, then there must be at least 10 unique values.  The%		reason to return L as well as y is that the user may want to%		select the same rows from another matrix besides the one%		input here as x.%%	summary: %		x 	input array; rows are observations%		matchi	vector of column indices in x that are to be matched %			to establish that an observation is a duplicate and% 			should be compared for uniqueness over some other% 			set of columns.  In other words, lump together the% 			rows with identical values in columns matchi.%		dcol    column to be tested for diversity.  %		nmin    minimum number of unique observations acceptable for%			inclusion of the group.%		nper    minimum number of observations of each of at least%			nmin unique values.%% testing%$$$ N = 40%$$$ x = [randn(N,2) < 0  randn(N,1) < .5 round(100 * randn(N,1))]  %$$$ size(x)%$$$ matchi = [1 2]%$$$ dcol = 3%$$$ nmin = 2%$$$ nper = 3incvect = zeros(size(x,1),1);[xu cxu] = munique(x(:,matchi));% go through each unique row.for j = 1:size(xu,1)  v = xu(j,:);				% match vals  L = x(:,matchi) == v(ones(size(x,1),1),:); % logic, with 1's and 0's   L = (prod(L'))';			% column vector with 1's where all  % Use L as the selection vector  y = x(L,dcol);			% vector of vals to check  [U c] = munique(y);			% unique vals in dcol and their count  % Next if statement checks if there are at least nmin unique vals that had  % at least nper repetitions.  if sum(c >= nper) >= nmin    incvect(L) = ones(sum(L),1);  endendy = x(incvect,:);			% return only included rows