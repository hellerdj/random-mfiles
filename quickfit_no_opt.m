function [alpha, beta] = quickfit(data)% QUICKFIT fits a weibull function to data using maximum likelihood%	maximization under binomial assumptions.  It uses FITFUNW for%	error calculation.  Data must be in 3 columns: x, %-correct, Nobs%	usage: [alpha, beta] = quickfit(data)%		alpha and beta are the threshold and slope parameters.global Data;Data = data;% generate guessq = ones(2,1);% use linear interpolation to guess alpha% next line takes x and %-cor columns, flips them and interpolates along% x to find the value corresponding to .8 correct.  The interpolation% requires monotonic %-cor column, so we sort the matrix 1st.% Remember, it's just a guess.a = find(data(:,2)>.7 & data(:,2)<.9);b = find(data(:,2)<.8 & data(:,2)>.8);if isempty(a) | isempty(b)  q(1,1) = mean(data(:,1));else  % q(1,1) = mean(a);  tmpdata = data + [zeros(size(data(:,1))) rand(size(data(:,2)))/100 zeros(size(data(:,3)))];  q(1,1) = table1(sortXbyColI(fliplr(tmpdata(:,1:2)),1),.8);end  % q(1,1) = table1(sort(fliplr(tmpdata(:,1:2))),.8);% note you can't use the preceding line on data since it will fail if there% are duplicates. That's the point of adding random vals. (This was Greg% Horwitz's idea.trace = 0;tol = .01;quick = fmins('fitfunw',q,[trace tol]);% quickalpha = quick(1,1);beta = quick(2,1);