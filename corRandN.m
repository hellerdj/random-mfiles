function y = corRandN(m,n,r_Q)% y = corRandN(m,n,r_Q)%	returns an m by n matrix of 0 mean unit variance normal deviates%	which are weakly correlated within columns. Within each column m-vector%	contains deviates that are *not* independent.  The n vectors%	themselves are independent.  For example, to model responses of 10%	weakly correlated neurons on 100 trials, set m=10 and n=100.  Matlab%	cov and corrcoef treat rows as the observations, so you must take%	the transpose to compute the resulting 10 by 10 covariance matrix.%	Note: r_Q can either be a constant, or the square root matrix of the%	desired covariance matrix.  If it is the former, it is interpreted%	as an r value (it must be positive 0..1).  The routine will run much%	faster if you supply the matrix square root. %	Use [C r_Q] = qrancorrelmtx(m,rmin,rmax,0) %%	To test for the mean correlation coef, try meanR(y').  Note the%	transpose.%%	M Shadlen, Feb 1995x = randn(m,n);if size(r_Q)==[1 1]			% form the sqrt cvm  C = r_Q * ones(m,m);  for i = 1:m    C(i,i) = 1;  end  Q = sqrtm(C);  y = Q * x;elseif size(r_Q) == [m m]  y = r_Q * x;else  size(r_Q)  error('corRandN: arg 3 must be m by m array -- mtx square root of cvm')end