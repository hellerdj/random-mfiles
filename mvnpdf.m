function p = mvnpdf(x,mu,C)% function p = mvnpdf(x,mu,C) multivariate normal prob density function% parameterized by expectation mu and covariance matrix C.% mu is column vector M x 1 or a matrix of expected vectors arranged as M % by N% C is covariance matrix M x M% x is either a column vector M x 1 or a matrix of N observations,% arranged as M x N% 3/22/99 extend to arrays of x% 5/14/99 extend to arrays of mudimMu = size(mu);dimX = size(x);if all(dimMu==dimX)  % this is fineelseif dimMu(2)~=1    error('mu must either be a column vector, or it must match the observations in x')endif isvector(x) & dimX(1)==1  error('observations in x must be column vectors')endif isvector(mu) & dimMu(1)==1  error('mu must be a column vector or a matrix of column vectors')end  if isvector(x) & all(dimMu > 1)  % we have one observation and several expected vectors  % So make a bunch of copies of x  x = repmat(x,1,dimMu(2));elseif isvector(mu) & all(dimX > 1)  % we have one expectation vector and several observation vectors  % So make a bunch of copies of mu  mu = repmat(mu,1,dimX(2));end% $$$ if dimX(2) == 1% $$$   p = ((2*pi)^(-.5*dimX(1)) / sqrt(det(C))) ...% $$$       * exp(-.5 * (x - mu)' * inv(C) *  (x - mu))';% $$$ elseif dimMu(2) == 1% $$$   p = nans(dimX(2),1);% $$$   K = ((2*pi)^(-.5*dimX(1)) / sqrt(det(C)));% $$$   for i=1:dimX(2)% $$$     p(i) = K * exp(-.5 * (x(:,i) - mu)' * inv(C) *  (x(:,i) - mu))';% $$$   end% $$$ else% there is a different mu(:,i) vector for every observation x(:,i)p = nans(dimX(2),1);K = ((2*pi)^(-.5*dimX(1)) / sqrt(det(C)));Cinv = inv(C);for i = 1:dimX(2)  p(i) = K * exp(-.5 * (x(:,i) - mu(:,i))' * Cinv *  (x(:,i) - mu(:,i)))';end    