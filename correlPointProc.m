% will be fx correlPointProc(n,t,Q)% Q, the sqrt mtx of the cvm, will be optional. can specify mean r instead% number of neurons.  The relationship between the cvm of the underlying% normal dist and the r we get out fo the counts is not straightforward.  n = 10t = .001:.001:.1;t = t(:);rbar = .5rmin = .5, rmax=.5, nocheck=1rvect = [.1:.1:.9]'zvect = [1.8:-.2:1.4];rmean = nans(length(rvect), length(zvect))ntrials = 1000for ir = 1:length(rvect)  rmin = rvect(ir);  rmax = rvect(ir);  [C Q] = qrancorrelmtx(n,rmin,rmax,nocheck);  c = nans(ntrials,n);  for iz = 1:length(zvect)    for i = 1:ntrials      x = normrnd(0,1,n,length(t));      % size(x)      y = Q*x;      % meanR(x')      % meanR(y')      % help meanR      s = y>zvect(iz);      % size(s)            meanrate = sum(s(:))/(n * t(end));      count = sum(s,2);      % var(count)            c(i,:) = count';    end        % size(c)    rmean(ir,iz) = meanR(c);  endend% the columns of rmean pertain to different vals of z, i.e., different% rates.  There is a weak tendency to achieve higher r at higher spike rates% (lower z).plot(rvect,rmean)[rvect rmean]