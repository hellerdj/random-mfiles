function [tripstot, gt1tot, trips, ngt1, n2, n3, ngt3, tripsSample, ...      ntripsSample] = countTrips(x,epochmax)% [tripstot gt1tot] = countTrips(x,epochmax)%   counts the number of unique triplets in a set of spike trains from%   several neurons.  The spike times must be integers values in msec and%   they must be arranges as a matrix such that each column represents a%   neuron.  The matrix must be rectangular -- no NaNs.%   The EPOCHMAX defines the maximal time span (in msec) that we will search%   for a pattern. The default value is 100 msec.% TRIPSTOT number of unique triplets w/in the epochmax criterion% GT1TOT   number of triplets that occur more than once (for the same 3 neurons)%% [tripstot, gt1tot, trips, ngt1, n2, n3, tripsSample, ntripsSample] = countTrips(x,epochmax)% The full set of return args are% TRIPS  vector of the number of trips in each 3-neuron combo% NGT1  vect of num of trips repeating (for each 3-neuron combo)% N2    vect of number of trips repeating exactly once% N3    vect of num of trips repeating twice (appearing 3 times)% tripsSample  matrix of recurring unique triplets tied to the last spike in%    the last 3-neuron combo considered.  (mainly for debugging)% ntripsSample corresponding vector of the number of times the triplets%    occurred in the sample.%% see also ~mike/varsim/ccg/WhiteNoise/triplets.m% 4/23/98 mns wrote itncells = size(x,2);			% each cell is a columnif any(~finite(x(:)))  error('bad spike array. type help countTrips')endif ~exist('epochmax')  epochmax = 100;end% This algorithm works only if we use 3 *different* cellsq = [1:ncells];celltrips = nchoosek(q(:)',3);[ntrips three] = size(celltrips);for i = 1:ntrips  % look at these 3 cells.  y = x(:,celltrips(i,:));    Y = repmat(y,size(y,1),1);  % size(Y)  ns = size(y,1);  for j = 1:ns    % time all spikes wrt jth spike in column 1    rows = ns * (j-1) + [1:ns];    Y(rows,1) = 0;			    Y(rows,[2 3]) = y(:,[2 3]) - y(j,1);   end  % apply the epochmax criterion  L = all(abs(Y) < epochmax, 2) &  abs(diff(Y(:,[2 3])')') <  epochmax;  %  size(Y)  [D c] = munique(Y(L,[2 3]));  trips(i) = size(D,1);			% unique triplets w/in epoch  ngt1(i) = sum(c>1);  n2(i) = sum(c==2);  n3(i) = sum(c==3);  ngt3(i) = sum(c>3);endgt1tot = sum(ngt1);% unique triplets w/in the epoch definitiontripstot = sum(trips);tripsSample = D(c>1,:);ntripsSample = c(c>1);