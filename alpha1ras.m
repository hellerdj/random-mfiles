function [spikerate,A] = alpha1ras(sptimes,arg2,arg3,alpha_tg,alpha_td)% [spikerate,A] = alpha1ras(sptimes,startmsec,endmsec,alpha_tg,alpha_td)% or % [spikerate] = alpha1ras(sptimes,A,t)%%% Given spike times in msec in vector sptimes, calculate the instantaneous% rate on the epoch startmsec to endmsec in 1 msec increments, using the% alpha function with parameters alpha_tg and alpha_td.  The alpha function% is returned as A, optionally.  The default time constants are 1 and 20% msec, respectively.  These are the values Jeff Schall uses in his work.% The default starting time is 0 and the default ending time is 3*alpha_td% after the last spike.%% sptimes must be in msec, the vector can contain NaN values%% To plot the instantaneous spike rate, use a time axis of% > t = [startmsec:endmsec] / 1000;		% time in sec% > plot(t,spikerate)%% To superimpose the spikes, try% > hold on; plot1ras(stimes/1000, height)% where height determines where on the graph you see the ticks.% 5/28/98 mns wrote itif nargin < 2   alphasupplied = 0;else  if isvector(arg2)    alphasupplied = 1;  else    alphasupplied = 0;  endendif alphasupplied  A = arg2;  if ~any(size(A)==1)    error('alpha function must be a vector')  end  if nargin < 3    % user did not supply t    t = [0:(nanmax(sptimes)+length(A))];  else    t = arg3(:);  end else					% alpha not supplied  % check if user supplied the time constants  if nargin < 4    alpha_tg = 1;  end  if nargin < 5    alpha_td = 20;  end  % tg = alpha_tg;			% this   % td = alpha_td;  % how long should the alpha function be?  Try 6 decay time constants to be  % safe.   tA = 0:6*alpha_td;  A = alphafunc(tA,alpha_tg,alpha_td);  % plot(tA,A)  % we also need to establish t    if nargin < 2    % default time if user fails to enter start and end times    startmsec = 0;    endmsec = max(r) + 3*alpha_td;  end  t0 = arg2;  t1 = arg3;  t = [t0:t1]';end% size(t)% size(r)r = round(sptimes(finite(sptimes)));r = r(:);				% column vector% make a lattice of timess = zeros(size(t));s(ismember(t,r)) = 1 ./ (t(2)-t(1));% t(logical(s))% all(r==t(logical(s)))q = conv(s,A); spikerate = 1000 * q(1:length(t));spikerate = spikerate(:);if size(sptimes,1)==1  % return a row vector  spikerate = spikerate';end