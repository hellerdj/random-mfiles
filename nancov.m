function [c, r, n] = nancov(y)% nancov returns a covariance matrix and r-matrix ignoring NaNs. The last% argument is n, the number of valid observations for each point.% usage: [c r n] = nancov(y)% % see cov, corrcoef% 11/8/97 mns wrote it[nrows ncols] = size(y);  s = nanstd(y);				% get the standard devsc = nans(ncols,ncols);r = nans(ncols,ncols);n = nans(ncols,ncols);if nrows < 3  warning('Isufficient data to compute covariance');  returnendfor i = 1:ncols  for j = 1:i    if i==j      c(i,j) = s(i) * s(i);      r(i,j) = 1;      n(i,j) = sum(finite(y(:,i)));    else      L = all(finite(y(:,[i j])),2);      if sum(L) < 3 | ~finite(s(i)) | ~finite(s(j)) | s(i)==0 | s(j)==0;	% insufficient data to cumpute r	c(i,j) = nan;	r(i,j) = nan;	n(i,j) = nan;      else	% sufficient data.  Pull out the complete rows	y2 = y(L,[i j]);	qc2 = corrcoef(y2);	c(i,j) = qc2(1,2) * s(i) * s(j); 	r(i,j) = qc2(1,2);	n(i,j) = sum(L);      end      % matrix is symmetrical so      c(j,i) = c(i,j);      r(j,i) = r(i,j);      n(j,i) = n(i,j);    end  endend  