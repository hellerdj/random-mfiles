function [n,xvals,nancount,hplot] = nanhist(x,bins,plotopt)% [n,xvals,nancount,hplot] = nanhist(x,bins,plotopt)% nanhist is supposed to be identical to the matlab function, hist, except% that it handles the presence of NaNs in the list. X must be a vector.% This version does not handle matrix input.  The extra argument controls% plotting.  You can plot the histogram or not, regradless of whether you% call with output args.  plotopt = 1 means plot; 0 means don't. The routine% will return a handle to the plot as the 4th argout.%% Here's what 'help hist' produces.%% $$$ % HIST	Plot histograms.% $$$  	HIST(Y) plots a histogram with 10 equally spaced bins between% $$$  	the minimum and maximum values in Y, showing the distribution% $$$  	of the elements in vector Y.% $$$  	HIST(Y,N), where N is a scalar, uses N bins.% $$$  	HIST(Y,X), where X is a vector, draws a histogram using the% $$$  	bins specified in X.% $$$  	[N,X] = HIST(...) does not draw a graph, but returns vectors% $$$  	X and N such that BAR(X,N) is the histogram.% $$$  % $$$  	See also BAR.% 11/9/96 mns wrote it[m n] = size(x);if m == 1  x = x(:);elseif n > 1  error('nanhist does not handle matrix input')endif nargin < 3  if nargout == 0    plotopt = 1;			% default is to plot  else    plotopt = 0;			% this is how hist behaves  endendm = length(x);if m < 2  error('too few observations')endq = isnan(x);nancount = sum(q);			%  how many are there?if nancount == m  error('nanhist encountered all NaNs')endx(q) = [];				% get rid of the nan'sif nargin > 1  [n xvals] = hist(x,bins);else  [n xvals] = hist(x);endif plotopt == 1  hplot = bar(xvals,n);end  