function [llmean, llsum, llsumD, df, p] = llikSptrain(atime,rate)% [llmean, llsum, llsumD, df, p] = llikSptrain(atime,rate)% Compute the log likelihood of obtaining the train of arrivals in ATIME,% given an underlying set of expectations for the rate process, RATE, under% Poisson assumptions.    There are many steps in the algorithm that could% be regarded as arbitrary.  I'm also not sure that the chi2 statistic is% appropriate since the models are not truly nested and because the degrees% of freedom value is not strictly correct.  I plan to make a version of% this that returns a Bayes Information Criterion, but have yet to tackle% the algorithm.  Still, for model data from step vs. ramp, the p vals% distinguish the type so spike trains with 98% reliablility (see% ~mike/lip/isr/step_ramp.m)%% Inputs% ~~~~~~% atime  vector of arrival times% rate   corresponding vector of rates.  Units should correpond.%% Note: develop other tools for spike train conversion to binary sequences,% interpolation of rate functions, to produce the input vectors here.%% Outputs% ~~~~~~~% mean,sumllik is just that mean and sum of log likelihoods% sullikD is the sum of log likelihoods if the observed interarrival times%         defined the expectations.  % df is the number of ISIs -1.  This is a bit controversial.% p is the probability that the expectations from the data themselves are no% better than the model based on PSTH.%% mns 6/20/96  adopted from lip/isr/step_ramp.m% check for input arg sizeif sum(size(atime) == (size(rate))) ~= 2  error('llikSptrain: input args must be same length vectors')end% interarrival timesisi = atime(2:length(atime)) - atime(1:length(atime)-1);% tag the time of the interarrival time the time of the arrival% this is somewhat arbitrary. We could go backward too.tisi = atime(2:length(atime));% the rate associated with each interarrival time is the average of% the rates at the time of each spike.  Again, this is a design feature and% could be argued as inappropriate.r1 = 0.5 * (atime(2:length(atime)) + atime(1:length(atime)-1));% compute the log likelihood -- we'all take the meanll0 = log(exppdf(isi,r1.^(-1)));llmean = mean(ll0);llsum = sum(ll0);llsumD = sum(log(exppdf(isi,isi)));df = length(isi)-1;p = chi2pdf(2*(llsumD-llsum), df);