function [L,n] = binLikeHist(v,x,countExtremes)% function L = binLikeHist(v,x) takes the vector, v, and makes a matrix,% L, whose columns are boolean selection arrays that correspond to the% elements in v that were counted in each of the histogram bins centered% at the values in x. The corresponding histogram would be plotted as% hist(v,x).  Unlike hist, however, this routine handles NaNs in the v. %% This routine is intended for binning data% So v(L(:,1)) would select the values % in v that comprise the 1st bin in a histogram.  There would be n(1) of% these. %% binLikeHist(v,x,1) will force the first and last bins to include data%    that fall below and above these bins.  This is the way hist works.%    The default is not to count these values.%% see also nanhist.m% 4/15/99  mns wrote it% 12/20/99 first & last bins contain the extremes, with optionif ~all([isvector(x) isvector(v)])  error('binLikeHist expects vectors for input');end% vectors must be column typev = v(:);x = x(:);if nargin < 3	% default behavior is to ignore the data outside the x values +- half	% a bin width.	countExtremes = 0;		end[n,xvals,nancount] = nanhist(v,x,0);binwidth = x(2)-x(1);xlo = x - (binwidth/2);xhi = x + binwidth/2;L = logical(repmat(0,length(v),length(x)));	% allocate boolean arrayLf = finite(v);if countExtremes == 1	L(:,1) = Lf & v<=xhi(1);	L(:,end) = Lf & (v > xlo(end));	for i = 2:length(x)-1		L(:,i) = Lf & (v > xlo(i)) & (v <= xhi(i));	endelse	for i = 1:length(x)		L(:,i) = Lf & (v > xlo(i)) & (v <= xhi(i));	endend