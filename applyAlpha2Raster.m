function [ratematrix,t] = applyAlpha2Raster(ras,startmsec,endmsec,alpha_tg,alpha_td)% [ratematrix,t] = applyAlpha2Raster(ras,startmsec,endmsec,alpha_tg,alpha_td)% Given a NaN padded matrix of spike times (in msec) arranged such that the% trials constitute the rows of ras, this routine returns a matrix of spike% rates, also arranged by trial row.  The output matrix is in msec% corresponding to the return vector t.  "Instantaneous" spike rate is% computed by convolution with an alpha function.% This is a slow function because it computes alpha each time%% startmsec, endmsec    start and end times of the output.  IF this is not%                       given, then the routine chooses 0 and the time of%                       the last spike + 3 td (decay time constants).% alpha_tg, alpha_td    alpha function time constants (1 and 20, by default)%%%% Here the time axis is already specified (in msec) as t% The alpha function is specified in Aif nargin < 4  % use default values  alpha_tg = 1;  alpha_td = 20;end% get the alpha functiontA = 0:6*alpha_td;A = alphafunc(tA,alpha_tg,alpha_td);if nargin < 2  % user did not supply t  t = [0:(nanmax(ras(:))+length(A))];else  t = startmsec:endmsec;end %  A this point we have A and tntrials = size(ras,1);ratematrix = nans(ntrials, length(t));for i = 1:ntrials  ratematrix(i,:) = alpha1ras(ras(i,:),A,t);end  